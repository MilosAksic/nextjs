{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport reducer from \"./reducer\";\n\nconst useFormik = props => {\n  if (!props.onSubmit) {\n    throw new Error(\"You forgot to pass on submit to useFormik\");\n  }\n\n  const [state, dispatch] = React.useReducer(reducer, {\n    values: props.initialValues,\n    errors: {},\n    touched: {},\n    isSubmitting: false\n  });\n  React.useEffect(() => {\n    if (props.validate) {\n      const errors = props.validate(state.values);\n      dispatch({\n        type: \"SET_ERRORS\",\n        payload: errors\n      });\n    }\n  }, [state.values]);\n\n  const handleChange = event => {\n    event.persist();\n    dispatch({\n      type: \"SET_FIELD_VALIUE\",\n      payload: {\n        [event.target.name]: event.target.value\n      }\n    });\n  };\n\n  const handleBlur = event => {\n    event.persist();\n    dispatch({\n      type: \"SET_FIELD_TOUCHED\",\n      payload: {\n        [event.target.name]: true\n      }\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    dispatch({\n      type: \"SUBMIT_ATTEMPT\"\n    }); //validate\n\n    const errors = props.validate(state.values);\n\n    if (!_Object$keys(errors).length) {\n      try {\n        await props.onSubmit(state.values);\n        dispatch({\n          type: \"SUBMIT_SUCCES\"\n        });\n      } catch (submitError) {\n        dispatch({\n          type: \"SUBMIT_FAILURE\",\n          payload: \"API mistake\"\n        });\n      }\n    } else {\n      dispatch({\n        type: \"SET_ERRORS\",\n        payload: errors\n      });\n      dispatch({\n        type: \"SUBMIT_FAILURE\",\n        payload: \"Submit failed\"\n      });\n    } //mark each field as touched\n\n  };\n\n  return _objectSpread({\n    handleChange,\n    handleBlur,\n    handleSubmit\n  }, state);\n};\n\nexport default useFormik;","map":{"version":3,"sources":["C:/Front end/Praksa/next-vezba/next-example/components/useFormik.js"],"names":["React","reducer","useFormik","props","onSubmit","Error","state","dispatch","useReducer","values","initialValues","errors","touched","isSubmitting","useEffect","validate","type","payload","handleChange","event","persist","target","name","value","handleBlur","handleSubmit","preventDefault","length","submitError"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,MAAI,CAACA,KAAK,CAACC,QAAX,EAAqB;AACnB,UAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,KAAK,CAACQ,UAAN,CAAiBP,OAAjB,EAA0B;AAClDQ,IAAAA,MAAM,EAAEN,KAAK,CAACO,aADoC;AAElDC,IAAAA,MAAM,EAAE,EAF0C;AAGlDC,IAAAA,OAAO,EAAE,EAHyC;AAIlDC,IAAAA,YAAY,EAAE;AAJoC,GAA1B,CAA1B;AAOAb,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpB,QAAIX,KAAK,CAACY,QAAV,EAAoB;AAClB,YAAMJ,MAAM,GAAGR,KAAK,CAACY,QAAN,CAAeT,KAAK,CAACG,MAArB,CAAf;AACAF,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,YAAR;AAAsBC,QAAAA,OAAO,EAAEN;AAA/B,OAAD,CAAR;AACD;AACF,GALD,EAKG,CAACL,KAAK,CAACG,MAAP,CALH;;AAOA,QAAMS,YAAY,GAAGC,KAAK,IAAI;AAC5BA,IAAAA,KAAK,CAACC,OAAN;AACAb,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,OAAO,EAAE;AAAE,SAACE,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AAApC;AAFF,KAAD,CAAR;AAID,GAND;;AAQA,QAAMC,UAAU,GAAGL,KAAK,IAAI;AAC1BA,IAAAA,KAAK,CAACC,OAAN;AACAb,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAE,mBADC;AAEPC,MAAAA,OAAO,EAAE;AAAE,SAACE,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqB;AAAvB;AAFF,KAAD,CAAR;AAID,GAND;;AAOA,QAAMG,YAAY,GAAG,MAAMN,KAAN,IAAe;AAClCA,IAAAA,KAAK,CAACO,cAAN;AACAnB,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR,CAFkC,CAGlC;;AACA,UAAML,MAAM,GAAGR,KAAK,CAACY,QAAN,CAAeT,KAAK,CAACG,MAArB,CAAf;;AACA,QAAI,CAAC,aAAYE,MAAZ,EAAoBgB,MAAzB,EAAiC;AAC/B,UAAI;AACF,cAAMxB,KAAK,CAACC,QAAN,CAAeE,KAAK,CAACG,MAArB,CAAN;AACAF,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACD,OAHD,CAGE,OAAOY,WAAP,EAAoB;AACpBrB,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAE,gBAAR;AAA0BC,UAAAA,OAAO,EAAE;AAAnC,SAAD,CAAR;AACD;AACF,KAPD,MAOO;AACLV,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,YAAR;AAAsBC,QAAAA,OAAO,EAAEN;AAA/B,OAAD,CAAR;AACAJ,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,gBAAR;AAA0BC,QAAAA,OAAO,EAAE;AAAnC,OAAD,CAAR;AACD,KAfiC,CAgBlC;;AACD,GAjBD;;AAmBA;AAASC,IAAAA,YAAT;AAAuBM,IAAAA,UAAvB;AAAmCC,IAAAA;AAAnC,KAAoDnB,KAApD;AACD,CArDD;;AAuDA,eAAeJ,SAAf","sourcesContent":["import React from \"react\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst useFormik = props => {\r\n  if (!props.onSubmit) {\r\n    throw new Error(\"You forgot to pass on submit to useFormik\");\r\n  }\r\n  const [state, dispatch] = React.useReducer(reducer, {\r\n    values: props.initialValues,\r\n    errors: {},\r\n    touched: {},\r\n    isSubmitting: false\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (props.validate) {\r\n      const errors = props.validate(state.values);\r\n      dispatch({ type: \"SET_ERRORS\", payload: errors });\r\n    }\r\n  }, [state.values]);\r\n\r\n  const handleChange = event => {\r\n    event.persist();\r\n    dispatch({\r\n      type: \"SET_FIELD_VALIUE\",\r\n      payload: { [event.target.name]: event.target.value }\r\n    });\r\n  };\r\n\r\n  const handleBlur = event => {\r\n    event.persist();\r\n    dispatch({\r\n      type: \"SET_FIELD_TOUCHED\",\r\n      payload: { [event.target.name]: true }\r\n    });\r\n  };\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n    dispatch({ type: \"SUBMIT_ATTEMPT\" });\r\n    //validate\r\n    const errors = props.validate(state.values);\r\n    if (!Object.keys(errors).length) {\r\n      try {\r\n        await props.onSubmit(state.values);\r\n        dispatch({ type: \"SUBMIT_SUCCES\" });\r\n      } catch (submitError) {\r\n        dispatch({ type: \"SUBMIT_FAILURE\", payload: \"API mistake\" });\r\n      }\r\n    } else {\r\n      dispatch({ type: \"SET_ERRORS\", payload: errors });\r\n      dispatch({ type: \"SUBMIT_FAILURE\", payload: \"Submit failed\" });\r\n    }\r\n    //mark each field as touched\r\n  };\r\n\r\n  return { handleChange, handleBlur, handleSubmit, ...state };\r\n};\r\n\r\nexport default useFormik;\r\n"]},"metadata":{},"sourceType":"module"}