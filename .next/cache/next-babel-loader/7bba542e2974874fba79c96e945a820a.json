{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport reducer from \"./reducer\";\n\nvar useFormik = function useFormik(props) {\n  if (!props.onSubmit) {\n    throw new Error(\"You forgot to pass on submit to useFormik\");\n  }\n\n  var _React$useReducer = React.useReducer(reducer, {\n    values: props.initialValues,\n    errors: {},\n    touched: {}\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    if (props.validate) {\n      var errors = props.validate(state.values);\n      dispatch({\n        type: \"SET_ERRORS\",\n        payload: errors\n      });\n    }\n  }, [state.values]);\n\n  var handleChange = function handleChange(event) {\n    event.persist();\n    dispatch({\n      type: \"SET_FIELD_VALIUE\",\n      payload: _defineProperty({}, event.target.name, event.target.value)\n    });\n  };\n\n  var handleBlur = function handleBlur(event) {\n    event.persist();\n    dispatch({\n      type: \"SET_FIELD_TOUCHED\",\n      payload: _defineProperty({}, event.target.name, true)\n    });\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    dispatch({\n      type: \"SUBMIT_ATTEMPT\"\n    }); //validate\n    //mark each field as touched\n\n    props.onSubmit(state.values);\n  };\n\n  return _objectSpread({\n    handleChange: handleChange,\n    handleBlur: handleBlur,\n    handleSubmit: handleSubmit\n  }, state);\n};\n\nexport default useFormik;","map":{"version":3,"sources":["C:/Front end/Praksa/next-vezba/next-example/components/useFormik.js"],"names":["React","reducer","useFormik","props","onSubmit","Error","useReducer","values","initialValues","errors","touched","state","dispatch","useEffect","validate","type","payload","handleChange","event","persist","target","name","value","handleBlur","handleSubmit","preventDefault"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AACzB,MAAI,CAACA,KAAK,CAACC,QAAX,EAAqB;AACnB,UAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAHwB,0BAICL,KAAK,CAACM,UAAN,CAAiBL,OAAjB,EAA0B;AAClDM,IAAAA,MAAM,EAAEJ,KAAK,CAACK,aADoC;AAElDC,IAAAA,MAAM,EAAE,EAF0C;AAGlDC,IAAAA,OAAO,EAAE;AAHyC,GAA1B,CAJD;AAAA;AAAA,MAIlBC,KAJkB;AAAA,MAIXC,QAJW;;AAUzBZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpB,QAAIV,KAAK,CAACW,QAAV,EAAoB;AAClB,UAAML,MAAM,GAAGN,KAAK,CAACW,QAAN,CAAeH,KAAK,CAACJ,MAArB,CAAf;AACAK,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,YAAR;AAAsBC,QAAAA,OAAO,EAAEP;AAA/B,OAAD,CAAR;AACD;AACF,GALD,EAKG,CAACE,KAAK,CAACJ,MAAP,CALH;;AAOA,MAAMU,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC5BA,IAAAA,KAAK,CAACC,OAAN;AACAP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,OAAO,sBAAKE,KAAK,CAACE,MAAN,CAAaC,IAAlB,EAAyBH,KAAK,CAACE,MAAN,CAAaE,KAAtC;AAFA,KAAD,CAAR;AAID,GAND;;AAQA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAL,KAAK,EAAI;AAC1BA,IAAAA,KAAK,CAACC,OAAN;AACAP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,mBADC;AAEPC,MAAAA,OAAO,sBAAKE,KAAK,CAACE,MAAN,CAAaC,IAAlB,EAAyB,IAAzB;AAFA,KAAD,CAAR;AAID,GAND;;AAOA,MAAMG,YAAY,GAAG,SAAfA,YAAe,CAAAN,KAAK,EAAI;AAC5BA,IAAAA,KAAK,CAACO,cAAN;AACAb,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR,CAF4B,CAG5B;AACA;;AACAZ,IAAAA,KAAK,CAACC,QAAN,CAAeO,KAAK,CAACJ,MAArB;AACD,GAND;;AAQA;AAASU,IAAAA,YAAY,EAAZA,YAAT;AAAuBM,IAAAA,UAAU,EAAVA,UAAvB;AAAmCC,IAAAA,YAAY,EAAZA;AAAnC,KAAoDb,KAApD;AACD,CAzCD;;AA2CA,eAAeT,SAAf","sourcesContent":["import React from \"react\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst useFormik = props => {\r\n  if (!props.onSubmit) {\r\n    throw new Error(\"You forgot to pass on submit to useFormik\");\r\n  }\r\n  const [state, dispatch] = React.useReducer(reducer, {\r\n    values: props.initialValues,\r\n    errors: {},\r\n    touched: {}\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (props.validate) {\r\n      const errors = props.validate(state.values);\r\n      dispatch({ type: \"SET_ERRORS\", payload: errors });\r\n    }\r\n  }, [state.values]);\r\n\r\n  const handleChange = event => {\r\n    event.persist();\r\n    dispatch({\r\n      type: \"SET_FIELD_VALIUE\",\r\n      payload: { [event.target.name]: event.target.value }\r\n    });\r\n  };\r\n\r\n  const handleBlur = event => {\r\n    event.persist();\r\n    dispatch({\r\n      type: \"SET_FIELD_TOUCHED\",\r\n      payload: { [event.target.name]: true }\r\n    });\r\n  };\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    dispatch({ type: \"SUBMIT_ATTEMPT\" });\r\n    //validate\r\n    //mark each field as touched\r\n    props.onSubmit(state.values);\r\n  };\r\n\r\n  return { handleChange, handleBlur, handleSubmit, ...state };\r\n};\r\n\r\nexport default useFormik;\r\n"]},"metadata":{},"sourceType":"module"}