{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _WeakMap from \"@babel/runtime-corejs2/core-js/weak-map\";\nexport const isObject = obj => {\n  if (obj !== null && typeof obj == \"object\") {\n    return true;\n  }\n\n  return false;\n};\nexport function setNestedObjectValues(object, value, visited = new _WeakMap(), response = {}) {\n  for (let k of _Object$keys(object)) {\n    const val = object[k];\n\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        response[k] = _Array$isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      } else {\n        response[k] = value;\n      }\n    }\n\n    return response;\n  }\n}","map":{"version":3,"sources":["C:/Front end/Praksa/next-vezba/next-example/components/utils.js"],"names":["isObject","obj","setNestedObjectValues","object","value","visited","response","k","val","get","set"],"mappings":";;;AAAA,OAAO,MAAMA,QAAQ,GAAGC,GAAG,IAAI;AAC7B,MAAIA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,IAAc,QAAlC,EAA4C;AAC1C,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CALM;AAOP,OAAO,SAASC,qBAAT,CACLC,MADK,EAELC,KAFK,EAGLC,OAAO,GAAG,cAHL,EAILC,QAAQ,GAAG,EAJN,EAKL;AACA,OAAK,IAAIC,CAAT,IAAc,aAAYJ,MAAZ,CAAd,EAAmC;AACjC,UAAMK,GAAG,GAAGL,MAAM,CAACI,CAAD,CAAlB;;AACA,QAAIP,QAAQ,CAACQ,GAAD,CAAZ,EAAmB;AACjB,UAAI,CAACH,OAAO,CAACI,GAAR,CAAYD,GAAZ,CAAL,EAAuB;AACrBH,QAAAA,OAAO,CAACK,GAAR,CAAYF,GAAZ,EAAiB,IAAjB;AACAF,QAAAA,QAAQ,CAACC,CAAD,CAAR,GAAc,eAAcC,GAAd,IAAqB,EAArB,GAA0B,EAAxC;AACAN,QAAAA,qBAAqB,CAACM,GAAD,EAAMJ,KAAN,EAAaC,OAAb,EAAsBC,QAAQ,CAACC,CAAD,CAA9B,CAArB;AACD,OAJD,MAIO;AACLD,QAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcH,KAAd;AACD;AACF;;AACD,WAAOE,QAAP;AACD;AACF","sourcesContent":["export const isObject = obj => {\r\n  if (obj !== null && typeof obj == \"object\") {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport function setNestedObjectValues(\r\n  object,\r\n  value,\r\n  visited = new WeakMap(),\r\n  response = {}\r\n) {\r\n  for (let k of Object.keys(object)) {\r\n    const val = object[k];\r\n    if (isObject(val)) {\r\n      if (!visited.get(val)) {\r\n        visited.set(val, true);\r\n        response[k] = Array.isArray(val) ? [] : {};\r\n        setNestedObjectValues(val, value, visited, response[k]);\r\n      } else {\r\n        response[k] = value;\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}